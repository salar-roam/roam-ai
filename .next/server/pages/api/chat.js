"use strict";(()=>{var e={};e.id=170,e.ids=[170],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},2079:e=>{e.exports=import("openai")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,s){return s in t?t[s]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,s)):"function"==typeof t&&"default"===s?t:void 0}}})},8653:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{config:()=>c,default:()=>l,routeModule:()=>p});var n=s(1802),a=s(7153),o=s(6249),i=s(8036),u=e([i]);i=(u.then?(await u)():u)[0];let l=(0,o.l)(i,"default"),c=(0,o.l)(i,"config"),p=new n.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/chat",pathname:"/api/chat",bundlePath:"",filename:""},userland:i});r()}catch(e){r(e)}})},6427:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.d(t,{f:()=>o});var n=s(2079),a=e([n]);if(n=(a.then?(await a)():a)[0],!process.env.OPENAI_API_KEY)throw Error("Missing OPENAI_API_KEY environment variable");let o=new n.default({apiKey:process.env.OPENAI_API_KEY});r()}catch(e){r(e)}})},9431:(e,t,s)=>{s.d(t,{O:()=>o});let r=require("@supabase/supabase-js"),n=process.env.SUPABASE_URL,a=process.env.SUPABASE_ANON_KEY;console.log("DEBUG (lib/supabase.ts): Checking environment variables..."),console.log(`DEBUG (lib/supabase.ts): SUPABASE_URL is ${n?"PRESENT":"MISSING"}. Value starts with: ${n?n.substring(0,20)+"...":"N/A"}`),console.log(`DEBUG (lib/supabase.ts): SUPABASE_ANON_KEY is ${a?"PRESENT":"MISSING"}. Value starts with: ${a?a.substring(0,20)+"...":"N/A"}`),n&&a||console.error("Missing Supabase environment variables!");let o=(0,r.createClient)(n||"",a||"")},8036:(e,t,s)=>{s.a(e,async(e,r)=>{try{s.r(t),s.d(t,{default:()=>i});var n=s(6427),a=s(9431),o=e([n]);n=(o.then?(await o)():o)[0];let u=(e,t,s)=>{let r=JSON.stringify(s,null,2),n=JSON.stringify(t,null,2);return`You are an AI assistant helping users create and search for events. Please process the following user input and respond according to the specified format.

Current Conversation History (for context, most recent last):
${r}

Current Event Draft (important for merging new details):
${n}

Now, based on the above conversation and draft, respond to the current user input: "${e}"`};async function i(e,t){if("POST"!==e.method)return t.status(405).json({message:"Method Not Allowed"});let{text:s,currentEventDraft:r,conversationHistory:o}=e.body;if(!s)return t.status(400).json({message:"Missing user input"});try{let e;let i=u(s,r,o||[]),l=(await n.f.chat.completions.create({model:"gpt-3.5-turbo-0125",messages:[{role:"system",content:i},{role:"user",content:s}],response_format:{type:"json_object"},temperature:.1})).choices[0].message.content;if(console.log("Raw OpenAI Response:",l),!l)return t.status(500).json({message:"OpenAI did not return a response."});try{e=JSON.parse(l)}catch(e){return console.error("Failed to parse OpenAI JSON response:",e),t.status(500).json({message:"Failed to parse AI response.",error:e})}if("search"===e.type){let s=e.query;if(!s)return t.status(400).json({message:"Search query not provided by AI."});let{data:r,error:n}=await a.O.from("events").select(`
          id, title, description, price_value, price_text, currency, tags, image_url, links, recurrence_rule, is_on_demand,
          towns(name, tz),
          hosts(id, name, phone_whatsapp, instagram),
          locations(id, name, address, lat, lng),
          event_occurrences(start_ts, end_ts)
        `).or(`title.ilike.%${s}%,description.ilike.%${s}%,tags.cs.{"${s}"},hosts.name.ilike.%${s}%,locations.name.ilike.%${s}%`).limit(10);if(n)return console.error("Supabase search error:",n),t.status(500).json({message:"Error searching events.",error:n.message});let o=r.map(e=>({id:e.id,title:e.title,description:e.description||"N/A",price_text:e.price_text||"Free",host:e.hosts?.name||"N/A",location:`${e.locations?.name||"N/A"}, ${e.locations?.address||"N/A"}`,occurrences:e.event_occurrences}));if(o&&o.length>0)return t.status(200).json({type:"search_results",results:o});return t.status(200).json({type:"search_results",message:e.user_facing_message||"No events found matching your search."})}if("event_creation"===e.type){let s=e.event,r=e.status,n=e.follow_up_questions||[],a=e.confirmation_message,o=e.user_facing_message;if("incomplete"===r&&n.length>0)return t.status(200).json({type:"follow_up",event:s,questions:n});if("confirmation_pending"===r&&a)return t.status(200).json({type:"follow_up",event:s,questions:[a]});if("complete"===r&&s)return t.status(200).json({type:"event_ready",event:s,message:o||"Event is ready for publishing!"});return t.status(200).json({type:"message",message:o||"I'm still processing your event details. Could you clarify?"})}if("message"===e.type&&e.message)return t.status(200).json({type:"message",message:e.message});return t.status(200).json({type:"message",message:"I could not understand your request. Please try again."})}catch(e){console.error("OpenAI API error:",e),t.status(500).json({message:"Error processing your request with AI.",error:e.message})}}r()}catch(e){r(e)}})},7153:(e,t)=>{var s;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return s}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(s||(s={}))},1802:(e,t,s)=>{e.exports=s(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var s=t(t.s=8653);module.exports=s})();